name: Docker CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  DOCKER_HUB_USERNAME: sergiovalerdev
  DOCKER_REPO_NAME: aws

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: |
        cd server
        npm install

    - name: Run integration tests
      run: |
        cd server
        npm test

    - name: Start application
      run: |
        cd server
        npm start &
        sleep 10
        if ! curl -s http://localhost:3000/auth/health | grep -q "Servidor corriendo correctamente"; then
          echo "Application failed to start properly"
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:latest .
    
    - name: Push Docker image
      run: |
        docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:latest
          docker stop wallatest-container || true
          docker rm wallatest-container || true
          docker run -d --name wallatest-container \
            -p 3000:3000 \
            -e DB_HOST='${{ secrets.DB_HOST }}' \
            -e DB_PORT='${{ secrets.DB_PORT }}' \
            -e DB_USER='${{ secrets.DB_USER }}' \
            -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
            -e DB_NAME='${{ secrets.DB_NAME }}' \
            -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:latest
          docker image prune -f